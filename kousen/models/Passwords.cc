/**
 *
 *  Passwords.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Passwords.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sample;

const std::string Passwords::Cols::_UserID = "UserID";
const std::string Passwords::Cols::_digest = "digest";
const std::vector<std::string> Passwords::primaryKeyName = {"UserID","digest"};
const bool Passwords::hasPrimaryKey = true;
const std::string Passwords::tableName = "passwords";

const std::vector<typename Passwords::MetaData> Passwords::metaData_={
{"UserID","std::string","character varying",64,0,1,1},
{"digest","std::string","character varying",128,0,1,1}
};
const std::string &Passwords::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Passwords::Passwords(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["UserID"].isNull())
        {
            userid_=std::make_shared<std::string>(r["UserID"].as<std::string>());
        }
        if(!r["digest"].isNull())
        {
            digest_=std::make_shared<std::string>(r["digest"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            digest_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Passwords::Passwords(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            digest_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

Passwords::Passwords(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("UserID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["UserID"].isNull())
        {
            userid_=std::make_shared<std::string>(pJson["UserID"].asString());
        }
    }
    if(pJson.isMember("digest"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["digest"].isNull())
        {
            digest_=std::make_shared<std::string>(pJson["digest"].asString());
        }
    }
}

void Passwords::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            digest_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void Passwords::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("UserID"))
    {
        if(!pJson["UserID"].isNull())
        {
            userid_=std::make_shared<std::string>(pJson["UserID"].asString());
        }
    }
    if(pJson.isMember("digest"))
    {
        if(!pJson["digest"].isNull())
        {
            digest_=std::make_shared<std::string>(pJson["digest"].asString());
        }
    }
}

const std::string &Passwords::getValueOfUserid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Passwords::getUserid() const noexcept
{
    return userid_;
}
void Passwords::setUserid(const std::string &pUserid) noexcept
{
    userid_ = std::make_shared<std::string>(pUserid);
    dirtyFlag_[0] = true;
}
void Passwords::setUserid(std::string &&pUserid) noexcept
{
    userid_ = std::make_shared<std::string>(std::move(pUserid));
    dirtyFlag_[0] = true;
}

const std::string &Passwords::getValueOfDigest() const noexcept
{
    const static std::string defaultValue = std::string();
    if(digest_)
        return *digest_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Passwords::getDigest() const noexcept
{
    return digest_;
}
void Passwords::setDigest(const std::string &pDigest) noexcept
{
    digest_ = std::make_shared<std::string>(pDigest);
    dirtyFlag_[1] = true;
}
void Passwords::setDigest(std::string &&pDigest) noexcept
{
    digest_ = std::make_shared<std::string>(std::move(pDigest));
    dirtyFlag_[1] = true;
}

void Passwords::updateId(const uint64_t id)
{
}
typename Passwords::PrimaryKeyType Passwords::getPrimaryKey() const
{
    return std::make_tuple(*userid_,*digest_);
}

const std::vector<std::string> &Passwords::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "UserID",
        "digest"
    };
    return inCols;
}

void Passwords::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getDigest())
        {
            binder << getValueOfDigest();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Passwords::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Passwords::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getDigest())
        {
            binder << getValueOfDigest();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Passwords::toJson() const
{
    Json::Value ret;
    if(getUserid())
    {
        ret["UserID"]=getValueOfUserid();
    }
    else
    {
        ret["UserID"]=Json::Value();
    }
    if(getDigest())
    {
        ret["digest"]=getValueOfDigest();
    }
    else
    {
        ret["digest"]=Json::Value();
    }
    return ret;
}

Json::Value Passwords::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getDigest())
            {
                ret[pMasqueradingVector[1]]=getValueOfDigest();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserid())
    {
        ret["UserID"]=getValueOfUserid();
    }
    else
    {
        ret["UserID"]=Json::Value();
    }
    if(getDigest())
    {
        ret["digest"]=getValueOfDigest();
    }
    else
    {
        ret["digest"]=Json::Value();
    }
    return ret;
}

bool Passwords::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("UserID"))
    {
        if(!validJsonOfField(0, "UserID", pJson["UserID"], err, true))
            return false;
    }
    else
    {
        err="The UserID column cannot be null";
        return false;
    }
    if(pJson.isMember("digest"))
    {
        if(!validJsonOfField(1, "digest", pJson["digest"], err, true))
            return false;
    }
    else
    {
        err="The digest column cannot be null";
        return false;
    }
    return true;
}
bool Passwords::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Passwords::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("UserID"))
    {
        if(!validJsonOfField(0, "UserID", pJson["UserID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("digest"))
    {
        if(!validJsonOfField(1, "digest", pJson["digest"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Passwords::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Passwords::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 64)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
